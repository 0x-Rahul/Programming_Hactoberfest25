#include <iostream>
#include <vector>

// Function to find the longest palindrome subarray
std::vector<int> findLongestPalindromeSubarray(const std::vector<int>& arr) {
    int n = arr.size();
    std::vector<int> longestPalindromeSubarray;
    
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            bool isPalindrome = true;
            for (int left = i, right = j; left < right; left++, right--) {
                if (arr[left] != arr[right]) {
                    isPalindrome = false;
                    break;
                }
            }
            
            if (isPalindrome && (j - i + 1) > longestPalindromeSubarray.size()) {
                longestPalindromeSubarray = std::vector<int>(arr.begin() + i, arr.begin() + j + 1);
            }
        }
    }
    
    return longestPalindromeSubarray;
}

int main() {
    std::vector<int> arr = {1, 2, 3, 4, 3, 5, 6, 7, 7, 6, 5};

    // Find the longest palindrome subarray
    std::vector<int> longestPalindromeSubarray = findLongestPalindromeSubarray(arr);

    if (longestPalindromeSubarray.empty()) {
        std::cout << "No palindrome subarray found." << std::endl;
    } else {
        std::cout << "Longest palindrome subarray: ";
        for (int num : longestPalindromeSubarray) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
